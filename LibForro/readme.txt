LibForro: A Fortran Library for Generating Random Objects

In this library, we will continuously add and improve Fortran code to generate random numbers, 
probability vectors, unitary matrices, state vectors, and density matrices.

One can use this library simply by copying all the files to the main program's folder and compiling them with:
$ gfortran -lblas -llapack -lforq *.f90
To run the executable file a.out generated just use:
$ ./a.out

REMARK: As can be seen above, LibForro depends on BLAS [1], Lapack [2], and LibForQ [3].

Another, perhaps more convenient, manner of using LibForro is by creating a static compiled version of it.  
For that purpose you may follow the simple steps listed below:
1) Download the code
2) Go to the associated folder
3) Create a library with the commands:
$ gfortran -O3 -c rng_mt.f90
$ gfortran -O3 -c *.f90
and
$ ar cr libforro.a *.o *.mod 
To compile your main program using this library, copy libforro.a to your program's folder and use the command: 
$ gfortran -lblas -llapack -lforq libforro.a main.f90
Even better, you can also copy the library to your computer's libraries folder, e.g. with:
$ sudo cp libforro.a /usr/local/lib
and use it, anywhere in your computer, via
$ gfortran -lblas -llapack -lforq -lforro main.f90

REMARK #1: The main tools available in LibForro are the same as those explained in Ref. [4], whose associated 
code is available in https://github.com/jonasmaziero/LibForQ-v1. The only change we 
want to mention here was made in order to avoid some complications one may have when generating the static 
library using a module to share the options for the generators. In this new version of LibForro, we call the 
generators as explained in [4], but we add a new variable to the first position of all calling argument lists. 
For instance, now we call the random density matrix generator using call rdmg(optg, d, rdm), with optg being 
a five-dimensional character(10) vector whose components specify your choices for the generators of random 
numbers, probability vectors, unitaries, state vectors, and density matrices, respectively. The convention 
for the options names is the same as the that described in [4]. However, if you want one of these random objects 
generated by a “standard method”, just set optg = "std".
REMARK #2: Although on Mac all the commands above worked fine, on Ubuntu I had to use one of the following commands for compilation:
$ gfortran main.f90 /usr/local/lib/libforro.a /usr/local/lib/libforq.a /usr/lib/liblapack.a /usr/lib/libblas.a
$ gfortran main.f90 /usr/local/lib/libforro.a /usr/local/lib/libforq.a -llapack -lblas

References:
[1] http://www.netlib.org/blas
[2] http://www.netlib.org/lapack
[3] https://github.com/jonasmaziero/LibForro.git
[4] J. Maziero, Fortran code for generating random probability vectors, unitaries, and quantum states, Frontiers in ICT 3, 4 (2016),
  arXiv:1512.05173.
[5] J. Maziero, Generating pseudo-random discrete probability distributions, Braz. J. Phys. 45, 377 (2015), arXiv:1502.02128.
[6] J. Maziero, Random sampling of quantum states: A survey of methods, Braz. J. Phys. 45 (2015), arXiv:1502.03644.
